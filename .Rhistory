source('functions/wordclouds_functions.R')
wordcloud <- plot_wordcloud(file_id = 'full_data',
use_image = FALSE)
source('functions/wordclouds_functions.R')
wordcloud_article <- plot_wordcloud(file_id = 'ej95ak',
use_image = FALSE)
wordcloud_article
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
library(ggplot)
library(dplyr)
library(plotly)
library(readr)
source('functions/sentiment_functions.R')
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
a <- list(
title = "Sentiment",
range = c(-1, 1)
)
plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
load(file = "../objects/corr_plot.RData")
load(file = "objects/corr_plot.RData")
correlation_plot
#
# p <- economics %>%
#   tidyr::gather(variable, value, -date) %>%
#   transform(id = as.integer(factor(variable))) %>%
#   plot_ly(x = ~date, y = ~value, color = ~variable, colors = "Dark2",
#           yaxis = ~paste0("y", id)) %>%
#   add_lines() %>%
#   subplot(nrows = 5, shareX = TRUE)
#
# p
library(plotly)
correlation_plot
library(ggplot2)
correlation_plot
library(plotly)
library(plotly)
library(ggplot2)
load(file = "objects/corr_plot.RData")
correlation_plot
correlation_plot
load(file = "objects/corr_plot_data.RData")
correlation_plot
install.packages(“plotly”)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(ggplot2)
load(file = "objects/corr_plot.RData")
load(file = "objects/corr_plot_data.RData")
correlation_plot
library(ggplot2)
library(plotly)
load(file = "objects/corr_plot.RData")
load(file = "objects/corr_plot_data.RData")
correlation_plot
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
correlation_plot
library(ggplot)
library(dplyr)
library(plotly)
library(readr)
source('functions/sentiment_functions.R')
source('functions/wordclouds_functions.R')
### timestamp data
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
# choosing only posts from specific thread
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
a <- list(
title = "Sentiment",
range = c(-1, 1)
)
plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
View(melted_cormat)
View(correlation_plot)
getwd()
source("/market_data/functions_thor.R")
source("./market_data/functions_thor.R")
xts1 <- csvToXTS("merged_indices.csv")
xts1 <- csvToXTS("./market_data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("reddit_sentiment.csv")
xts_reddit <- csvToXTS("./market_data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
xts_merged <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
dfm <- xtsToDF(xts_merged)
dfm_small <- xtsToDF(xts_merged_small)
plotMultiple(dfm, "GE", "ZG", "LMT")
plotMultiple(dfm_small, "GE", "HAL", "Sentiment")
source("./functions/functions_thor.R")
source("./functions/functions_thor.R")
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
plotMultiple(dfm, "GE", "ZG", "LMT")
plotMultiple(dfm_small, "GE", "HAL", "Sentiment")
plotMultiple(dfm, "GE", "ADM", "LMT")
plotMultiple(dfm, "GE", "USD.IRR", "LMT")
plotMultiple(dfm, "GE", "CL", "LMT")
library(reshape2)
library(ggplot2)
library(plotly)
getLowerTri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
df_corr <- dfm[, -which (names(dfm) %in% c("date_time", "ID"))] %>%
na.omit()
cormat <- round(cor(df_corr),2)
reorderCormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorderCormat(cormat)
lower_tri <- getLowerTri(cormat)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
gg_corr <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.0, 0.5),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
correlation_plot <- ggplotly(gg_corr)
correlation_plot
save(correlation_plot, file = "./objects/corr_plot.RData")
save(melted_cormat, file = "./objects/corr_plot_data.RData")
load( "./objects/corr_plot.RData")
correlation_plot
library(ggplot2)
library(plotly)
load( "objects/corr_plot.RData")
correlation_plot
shiny::runApp()
runApp()
ui <- dashboardPage(
dashboardHeader(title = "Iran vs Trump"),
dashboardSidebar(
br(),
strong("Developed by"),
sidebarMenu(
menuItem("Michal Thor", icon = icon("dashboard")),
menuItem("Bartlomiej Kowalczuk", icon = icon("th"))
)
),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(104155,
"Number of posts",
icon = icon("credit-card"),
color = "purple"),
# Dynamic valueBoxes
valueBox("6 months",
"Analysis period",
icon = icon("credit-card")),
valueBox(53638,
"Distinct strings",
icon = icon("credit-card"),
color = "orange")
),
br(),
br(),
fluidRow(
box(
title = "Wordcloud",
background = "light-blue",
solidHeader = TRUE,
width = 12,
"Data from last 6 months - over 100k posts", br(), br(),
wordcloud2Output('wordcloud2')
)
),
fluidRow(
box(
title = "Histogram of sentiment",
background = "light-blue",
solidHeader = TRUE,
"Data from last 6 months - over 100k posts", br(), br(),
plotlyOutput("histogram_sentiment")
)
),
fluidRow(
box(
title = "Correlation between prices",
background = "light-blue",
solidHeader = TRUE,
plotlyOutput("corr_plot")
)
)
)
)
runApp()
source("./functions/functions_thor.R")
##############################################################
# I Multiple plots with Sentiment
##############################################################
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
library(reshape2)
library(ggplot2)
library(plotly)
getLowerTri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
df_corr <- df_corr[, -which (names(dfm) %in% c("date_time", "ID"))] %>%
na.omit()
cormat <- round(cor(df_corr),2)
reorderCormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorderCormat(cormat)
lower_tri <- getLowerTri(cormat)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
gg_corr <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.0, 0.5),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
correlation_plot <- ggplotly(gg_corr)
correlation_plot
runApp()
library(plotly)
library(xts)
library(dplyr)
library(tidyr)
source("./functions/functions_thor.R")
##############################################################
# I Multiple plots with Sentiment
##############################################################
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
library(reshape2)
library(ggplot2)
library(plotly)
library(reshape2)
getLowerTri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
df_co <- df_corr[, -which (names(df_corr) %in% c("date_time", "ID"))] %>%
na.omit()
cormat <- round(cor(df_co),2)
reorderCormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorderCormat(cormat)
lower_tri <- getLowerTri(cormat)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
gg_corr <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.0, 0.5),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
correlation_plot <- ggplotly(gg_corr)
correlation_plot
save(correlation_plot, file = "./objects/corr_plot.RData")
save(melted_cormat, file = "./objects/corr_plot_data.RData")
runApp()
runApp()
runApp()
runApp()
library(plotly)
library(xts)
library(dplyr)
library(tidyr)
source("./functions/functions_thor.R")
##############################################################
# I Multiple plots with Sentiment
##############################################################
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
triple_underlying_plot <- plotMultiple(dfm, "GE", "ZG", "LMT")
triple_underlying_plot
save(triple_underlying_plot, file = "objects/triple_underlying_plot.RData")
load("objects/triple_underlying_plot.RData")
triple_underlying_plot
runApp()
### timestamp data
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
# choosing only posts from specific thread
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
a <- list(
title = "Sentiment",
range = c(-1, 1)
)
plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
sentiment_histogram <- plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
save(sentiment_histogram, file = "objects/sentiment_histogram.RData")
load("objects/sentiment_histogram.RData")
sentiment_histogram
save(sentiment, file = "objects/sentiment_timestamp.RData")
### timestamp data
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
# choosing only posts from specific thread
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
save(sentiment, file = "objects/sentiment_timestamp.RData")
load("objects/sentiment_timestamp.RData")
load("objects/sentiment_histogram.RData")
sentiment_histogram
runApp()
runApp()
runApp()
runApp()
