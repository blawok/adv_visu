df_corr <- dfm[, -which (names(dfm) %in% c("date_time", "ID"))] %>%
na.omit()
cormat <- round(cor(df_corr),2)
reorderCormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorderCormat(cormat)
lower_tri <- getLowerTri(cormat)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
gg_corr <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.0, 0.5),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
correlation_plot <- ggplotly(gg_corr)
correlation_plot
save(correlation_plot, file = "./objects/corr_plot.RData")
save(melted_cormat, file = "./objects/corr_plot_data.RData")
load( "./objects/corr_plot.RData")
correlation_plot
library(ggplot2)
library(plotly)
load( "objects/corr_plot.RData")
correlation_plot
shiny::runApp()
runApp()
ui <- dashboardPage(
dashboardHeader(title = "Iran vs Trump"),
dashboardSidebar(
br(),
strong("Developed by"),
sidebarMenu(
menuItem("Michal Thor", icon = icon("dashboard")),
menuItem("Bartlomiej Kowalczuk", icon = icon("th"))
)
),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(104155,
"Number of posts",
icon = icon("credit-card"),
color = "purple"),
# Dynamic valueBoxes
valueBox("6 months",
"Analysis period",
icon = icon("credit-card")),
valueBox(53638,
"Distinct strings",
icon = icon("credit-card"),
color = "orange")
),
br(),
br(),
fluidRow(
box(
title = "Wordcloud",
background = "light-blue",
solidHeader = TRUE,
width = 12,
"Data from last 6 months - over 100k posts", br(), br(),
wordcloud2Output('wordcloud2')
)
),
fluidRow(
box(
title = "Histogram of sentiment",
background = "light-blue",
solidHeader = TRUE,
"Data from last 6 months - over 100k posts", br(), br(),
plotlyOutput("histogram_sentiment")
)
),
fluidRow(
box(
title = "Correlation between prices",
background = "light-blue",
solidHeader = TRUE,
plotlyOutput("corr_plot")
)
)
)
)
runApp()
source("./functions/functions_thor.R")
##############################################################
# I Multiple plots with Sentiment
##############################################################
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
library(reshape2)
library(ggplot2)
library(plotly)
getLowerTri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
df_corr <- df_corr[, -which (names(dfm) %in% c("date_time", "ID"))] %>%
na.omit()
cormat <- round(cor(df_corr),2)
reorderCormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorderCormat(cormat)
lower_tri <- getLowerTri(cormat)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
gg_corr <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.0, 0.5),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
correlation_plot <- ggplotly(gg_corr)
correlation_plot
runApp()
library(plotly)
library(xts)
library(dplyr)
library(tidyr)
source("./functions/functions_thor.R")
##############################################################
# I Multiple plots with Sentiment
##############################################################
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
library(reshape2)
library(ggplot2)
library(plotly)
library(reshape2)
getLowerTri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
df_co <- df_corr[, -which (names(df_corr) %in% c("date_time", "ID"))] %>%
na.omit()
cormat <- round(cor(df_co),2)
reorderCormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorderCormat(cormat)
lower_tri <- getLowerTri(cormat)
melted_cormat <- melt(lower_tri, na.rm = TRUE)
gg_corr <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(1.0, 0.5),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
correlation_plot <- ggplotly(gg_corr)
correlation_plot
save(correlation_plot, file = "./objects/corr_plot.RData")
save(melted_cormat, file = "./objects/corr_plot_data.RData")
runApp()
runApp()
runApp()
runApp()
library(plotly)
library(xts)
library(dplyr)
library(tidyr)
source("./functions/functions_thor.R")
##############################################################
# I Multiple plots with Sentiment
##############################################################
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
triple_underlying_plot <- plotMultiple(dfm, "GE", "ZG", "LMT")
triple_underlying_plot
save(triple_underlying_plot, file = "objects/triple_underlying_plot.RData")
load("objects/triple_underlying_plot.RData")
triple_underlying_plot
runApp()
### timestamp data
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
# choosing only posts from specific thread
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
a <- list(
title = "Sentiment",
range = c(-1, 1)
)
plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
sentiment_histogram <- plot_ly(x=~sentiment$ave_sentiment,
type = "histogram",
histnorm = "probability",
alpha = 0.8) %>% layout(xaxis = a)
save(sentiment_histogram, file = "objects/sentiment_histogram.RData")
load("objects/sentiment_histogram.RData")
sentiment_histogram
save(sentiment, file = "objects/sentiment_timestamp.RData")
### timestamp data
sentiment <- read_csv('data/df_with_sentiment_timestamp.csv')
# choosing only posts from specific thread
sentiment <- filter(sentiment, sentiment$thread_id == 'ej95ak')
save(sentiment, file = "objects/sentiment_timestamp.RData")
load("objects/sentiment_timestamp.RData")
load("objects/sentiment_histogram.RData")
sentiment_histogram
runApp()
runApp()
runApp()
runApp()
source("./functions/functions_thor.R")
shiny::runApp()
xts1 <- csvToXTS("./data/merged_indices.csv")
index(xts1) <- round(index(xts1), "days")
xts_reddit <- csvToXTS("./data/reddit_sentiment.csv")
xts_reddit <- apply.daily(xts_reddit, sum)
colnames(xts_reddit) <- c("Sentiment")
# write.zoo(xts_reddit,file="reddit_xts.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
xts_merged_small <- merge.xts(xts1, xts_reddit) %>%
na.omit()
xts_corr <- merge.xts(xts1, xts_reddit) %>%
na.locf(.) %>%
na.omit()
dfm <- xtsToDF(xts1)
dfm_small <- xtsToDF(xts_merged_small)
df_corr <- xtsToDF(xts_corr)
triple_underlying_sent_plot <- plotMultiple(dfm_small, "GE", "HAL", "Sentiment")
triple_underlying_sent_plot
save(triple_underlying_sent_plot, "objects/triple_underlying_sent_plot.RData")
source("./functions/functions_thor.R")
triple_underlying_sent_plot <- plotMultiple(dfm_small, "GE", "HAL", "Sentiment")
triple_underlying_sent_plot
triple_underlying_plot <- plotMultiple(dfm, "GE", "ZG", "LMT")
triple_underlying_plot
save(triple_underlying_plot, file = "objects/triple_underlying_plot.RData")
triple_underlying_sent_plot <- plotMultiple(dfm_small, "GE", "HAL", "Sentiment")
triple_underlying_sent_plot
save(triple_underlying_sent_plot, file = "objects/triple_underlying_sent_plot.RData")
z <- read.zoo("./data/merged_indices.csv", sep=",", header = TRUE, tz = "")
data_x <- as.xts(z)
df_x <- data.frame(data_x)
df_x <- cbind(date_time = rownames(df_x), df_x)
df_x$ID <- seq.int(nrow(df_x))
names(df_x) <- gsub(".Open", "", names(df_x), fixed = TRUE)
df_x_acc <- df_x %>%
accumulateBy(~ID)
# write.zoo(data_x,file="merged_indices.csv",index.name="date",row.names=FALSE,col.names=TRUE,sep=",")
r <- read.zoo("./data/reddit_xts.csv", sep=",", header = TRUE, tz = "")
data_r <- as.xts(r)
df_r <- data.frame(data_r)
df_r <- cbind(date_time = rownames(df_r), df_r)
df_r$ID <- seq.int(nrow(df_r))
names(df_r) <- c("date_time", "sentiment", "ID")
df_r_acc <- df_r %>%
accumulateBy(~ID)
triple_selfdrawing_plot <- df_x_acc %>%
plot_ly(
x = ~ID,
y = ~XAR,
frame = ~frame,
type = 'scatter',
mode = 'lines',
name = "XAR",
line = list(color = 'rgb(0, 16, 33)'),
text = ~paste(date_time, "<br>Value: $", XAR),
hoverinfo = 'text'
)  %>%
add_trace(
y = ~ADM,
name = 'ADM',
line = list(color = 'rgb(17, 181, 228)'),
mode = 'lines',
text = ~paste(date_time, "<br>Value: $", ADM)
) %>%
add_trace(
y = ~XOM,
name = 'XOM',
mode = 'lines',
line = list(color = 'rgb(20, 129, 186)'),
text = ~paste(date_time, "<br>Value: $", XOM)
) %>%
layout(
# title = "Values of chosen underlyings since July 2019",
yaxis = list(
title = "Underlying",
range = c(35,115),
zeroline = F,
tickprefix = "$"
),
xaxis = list(
title = "Day",
range = c(0,130),
zeroline = F,
showgrid = F
)
) %>%
animation_opts(
frame = 40,
transition = 7,
redraw = FALSE
) %>%
animation_slider(
currentvalue = list(
prefix = "Day "
)
)
sentiment_selfdrawing_plot <- df_r_acc %>%
plot_ly(
x = ~ID,
y = ~sentiment,
frame = ~frame,
type = 'scatter',
mode = 'lines',
name = "Sentiment",
line = list(color = 'rgb(12, 170, 220)'),
text = ~paste(date_time, "<br>Value:", sentiment),
hoverinfo = 'text'
) %>%
layout(
# title = "Sentiment value since May 2019",
yaxis = list(
title = "Sentiment value",
range = c(-0.8,0.8),
zeroline = F
),
xaxis = list(
title = "Day",
range = c(0,72),
zeroline = F,
showgrid = F
)
) %>%
animation_opts(
frame = 40,
transition = 7,
redraw = FALSE
) %>%
animation_slider(
currentvalue = list(
prefix = "Day "
)
)
triple_selfdrawing_plot
save(triple_selfdrawing_plot, file = "objects/triple_selfdrawing_plot.RData")
save(sentiment_selfdrawing_plot, file = "objects/sentiment_selfdrawing_plot.RData")
old_usa <- getSentiment("c35akk")
old_usa_radar <- createRadar(df = old_usa,
title = "USA action reception 6 months ago",
rgba_marker = 'rgba(3, 71, 72, 1.0)',
rgba_fill = 'rgba(3, 71, 72, 0.5)',
rgba_line = 'rgba(3, 71, 72, 0.8)')
old_iran <- getSentiment("c555x4")
old_iran_radar <- createRadar(df = old_iran,
title = "Iran action reception 6 months ago",
rgba_marker = 'rgba(62, 94, 208, 1.0)',
rgba_fill = 'rgba(62, 94, 208, 0.5)',
rgba_line = 'rgba(62, 94, 208, 0.8)')
new_usa <- getSentiment("ej95ak")
new_usa_radar <- createRadar(df = new_usa,
title = "USA action reception today",
rgba_marker = 'rgba(242, 33, 33, 1.0)',
rgba_fill = 'rgba(242, 33, 33, 0.5)',
rgba_line = 'rgba(242, 33, 33, 0.8)')
new_iran <- getSentiment("elku7e")
new_iran_radar <- createRadar(df = new_iran,
title = "Iran action reception today",
rgba_marker = 'rgba(16, 188, 125, 208, 1.0)',
rgba_fill = 'rgba(16, 188, 125, 0.5)',
rgba_line = 'rgba(16, 188, 125, 0.8)')
source("./functions/functions_thor.R")
old_usa <- getSentiment("c35akk")
old_usa_radar <- createRadar(df = old_usa,
title = "USA action reception 6 months ago",
rgba_marker = 'rgba(3, 71, 72, 1.0)',
rgba_fill = 'rgba(3, 71, 72, 0.5)',
rgba_line = 'rgba(3, 71, 72, 0.8)')
save(old_usa_radar, file = "objects/old_usa_radar.RData")
old_iran <- getSentiment("c555x4")
old_iran_radar <- createRadar(df = old_iran,
title = "Iran action reception 6 months ago",
rgba_marker = 'rgba(62, 94, 208, 1.0)',
rgba_fill = 'rgba(62, 94, 208, 0.5)',
rgba_line = 'rgba(62, 94, 208, 0.8)')
old_iran_radar
save(old_iran_radar, file = "objects/old_iran_radar.RData")
save(old_usa, file = "objects/old_usa_data.RData")
save(old_iran, file = "objects/old_iran_data.RData")
save(old_iran_radar, file = "objects/old_iran_radar.RData")
new_usa <- getSentiment("ej95ak")
new_usa_radar <- createRadar(df = new_usa,
title = "USA action reception today",
rgba_marker = 'rgba(242, 33, 33, 1.0)',
rgba_fill = 'rgba(242, 33, 33, 0.5)',
rgba_line = 'rgba(242, 33, 33, 0.8)')
save(new_usa, file = "objects/new_usa_data.RData")
save(new_usa_radar, file = "objects/new_usa_radar.RData")
new_iran <- getSentiment("elku7e")
new_iran_radar <- createRadar(df = new_iran,
title = "Iran action reception today",
rgba_marker = 'rgba(16, 188, 125, 208, 1.0)',
rgba_fill = 'rgba(16, 188, 125, 0.5)',
rgba_line = 'rgba(16, 188, 125, 0.8)')
save(new_iran, file = "objects/new_iran_data.RData")
save(new_iran_radar, file = "objects/new_iran_radar.RData")
load("objects/triple_underlying__sent_plot.RData")
load("objects/triple_underlying_sent_plot.RData")
}
runApp()
runApp()
runApp()
load("objects/sentiment_timestamp.RData")
runApp()
runApp()
load("objects/triple_selfdrawing_plot.RData")
triple_selfdrawing_plot
runApp()
load("objects/sentiment_selfdrawing_plot.RData")
sentiment_selfdrawing_plot
runApp()
runApp()
runApp()
